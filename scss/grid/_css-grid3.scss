@import '../layout/breakpoint';
$grid-column-size: 1fr;


@mixin css-grid() {
  display: grid;
  max-width: 99rem;
  margin-right: auto;
  margin-left: auto;
  grid-template-columns: repeat(
    $grid-columns,
    minmax(0, $grid-column-size)
  );
}

@mixin subgrid() {
  display: grid;
  grid-template-columns: repeat(
    $grid-columns,
    minmax(0, $grid-column-size)
  );
}


@mixin -column-span($i) {
  @if $i == 0 {
    display: none;
  } @else {
    display: block;
    grid-column: span $i / span $i;
  }
}

@mixin make-css-grid-columns($breakpoints: $grid-breakpoints, $columns: $advanced-grid-columns) {

  @for $i from 0 through $columns {
    .p--css-grid.p--grid--#{$i},
    .p--subgrid.p--grid--#{$i} {
      grid-template-columns: repeat(
        $i,
        minmax(0, $grid-column-size)
      );
    }
  }

  .p--col-span-auto {
    grid-column: auto;
  }

  @for $i from 0 through $columns {
    .p--col-span-#{$i} {
      @include -column-span($i);
    }
  };

  @each $name, $value in $breakpoints {
    @include breakpoint($name) {   
      @for $i from 0 through $columns {
        .p--#{$name}\:col-span-#{$i} {
          @include -column-span($i);
        }
      }

      .p--#{$name}\:col-span-auto {
        grid-column: auto;
      }
    }
  }
}


@mixin make-css-grid-container($breakpoints: $grid-breakpoints) {

  @each $name, $value in $breakpoints {
    $margin: map-get($value, margin);
    $gutter: map-get($value, gutter);

    @include breakpoint($name) {
      padding-right: #{calc(($grid-gutter / 2)) + $margin};
      padding-left: #{calc(($grid-gutter / 2)) + $margin};
      column-gap: $gutter;

      &.p--css-grid--narrow > [class*='col'] {
        margin-left: calc( $gutter / 2 * -1);
      }

      &.p--css-grid--condensed {
        margin-right: calc( $gutter / 2 * -1);
        margin-left: calc( $gutter / 2 * -1);
      }
    }
  }
}


@mixin css-grid-col-offset($breakpoints: $grid-breakpoints, $columns: $advanced-grid-columns) {

  @for $i from 1 through $columns {
    .p--col-start-#{$i} {
      grid-column-start: $i;
    }
  
    .p--col-end-#{$i} {
      grid-column-end: $i;
    }
  }

  @each $name, $value in $breakpoints {
    @include breakpoint($name) {
      @for $i from 1 through $columns + 1 {

        .p--#{$name}\:col-start-#{$i} {
          grid-column-start: $i;
        }

        .p--#{$name}\:col-end-#{$i} {
          grid-column-start: $i;
        }
      }
    }
  }
}




@mixin grid-css() {
  .p--css-grid {
    @include css-grid();
    @include make-css-grid-container(); 
  }

  .p--css-grid--fluid {
    max-width: 100%;
  }

  

  @include make-css-grid-columns();
  @include css-grid-col-offset();

  .p--subgrid {
    @include subgrid();
    @include make-css-grid-container();
  }

  .p--css-grid--no-gutter {
    column-gap: 0;
  }
}



.p--css-grid 
  .p--subgrid {
  padding: 0;
}

.p--css-grid
  .p--subgrid.p--css-grid--narrow {
  padding: 0;
}

.p--css-grid--condensed {
  column-gap: $grid-gutter--condensed !important;
  row-gap: $grid-gutter--condensed !important;
}

// -----------------------------------------------------------------------------
// Utilities
// -----------------------------------------------------------------------------

.p--justify-items-start {
  justify-items: start;
}

.p--justify-items-center {
  justify-items: center;
}

.p--justify-items-end {
  justify-items: end;
}

.p--align-items-start {
  align-items: start;
}

.p--align-items-center {
  align-items: center;
}

.p--align-items-end {
  align-items: end;
}